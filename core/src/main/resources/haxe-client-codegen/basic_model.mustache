class {{classname}} {
  {{#models}}
  {{#model}}
  {{#allVars}}
  public var {{name}}(default, set): {{^required}}Null<{{/required}}{{dataType}}{{#isListContainer}}<{{#items}}{{dataType}}{{/items}}>{{/isListContainer}}{{^required}}>{{/required}};
  {{/allVars}}
  {{/model}}
  {{/models}}


  public function new({{#models}}{{#model}}{{#requiredVars}}{{name}}: {{dataType}}{{#isListContainer}}<{{#items}}{{dataType}}{{/items}}>{{/isListContainer}}{{#hasMore}}, {{/hasMore}}{{/requiredVars}}{{#hasRequired}}{{#hasOptional}}, {{/hasOptional}}{{/hasRequired}}{{#optionalVars}}?{{name}}: {{dataType}}{{#isListContainer}}<{{#items}}{{dataType}}{{/items}}>{{/isListContainer}}{{#hasMore}}, {{/hasMore}}{{/optionalVars}}{{/model}}{{/models}}) {
    {{#models}}
    {{#model}}
    {{#allVars}}
    this.{{name}} = {{name}};
    {{/allVars}}
    {{/model}}
    {{/models}}
  }

  {{#models}}
  {{#model}}
  {{#allVars}}
  public function set_{{name}}(value: {{dataType}}{{#isListContainer}}<{{#items}}{{dataType}}{{/items}}>{{/isListContainer}}) {
    {{#hasValidation}}
    {{#maximum}}
    if (value > {{maximum}}) {
      throw "Value cannot be more than ${{{maximum}}}";
    }
    {{/maximum}}
    {{#maxItems}}
    if (value.length > {{maxItems}}) {
      throw "Value cannot contain more than {{maxItems}} elements";
    }
    {{/maxItems}}
    {{#maxLength}}
    if (value.length > {{maxLength}}) {
      throw "Value cannot be longer than {{maxLength}}";
    }
    {{/maxLength}}
    {{#minimum}}
    if (value < {{minimum}}) {
      throw "Value cannot be less than {{minimum}}";
    }
    {{/minimum}}
    {{#minItems}}
    if (value.length > {{minItems}}) {
      throw "Value cannot contain less than {{minItems}} elements";
    }
    {{/minItems}}
    {{#minLength}}
    if (value.length < {{minLength}}) {
      throw "Value cannot be shorter than {{minLength}}";
    }
    {{/minLength}}
    {{#pattern}}
    var pattern = ~{{pattern}};
    if (!pattern.match(value)) {
      throw "${value} does not match pattern: {{pattern}}";  {{!fix escaping and single quotes}}
    }
    {{/pattern}}
    {{/hasValidation}}
    return {{name}} = value;
  }

  {{/allVars}}
  {{/model}}
  {{/models}}
  public function validate(): Void {
    // you can do your custom validation here
  }

  public static function fromDynamic(data: Dynamic): {{classname}} {
    {{#models}}
    {{#model}}
    {{#allVars}}
    {{#isListContainer}}
    var {{name}}: Array<{{#items}}{{dataType}}{{/items}}> = [];
    if (Reflect.field(data, "{{name}}") != null) {
      for (item in cast(data.{{name}}, Array<Dynamic>)) {
        {{name}}.push({{#items}}{{#isPrimitiveType}}cast(item, {{dataType}}){{/isPrimitiveType}}{{^isPrimitiveType}}{{dataType}}.fromDynamic(item){{/isPrimitiveType}}{{/items}});
      }
    }
    {{/isListContainer}}
    {{^isListContainer}}
    var {{name}}: {{^required}}Null<{{/required}}{{dataType}}{{^required}}>{{/required}} = {{^required}}if (Reflect.hasField(data, "{{name}}")) {{/required}}{{#isPrimitiveType}}cast({{/isPrimitiveType}}{{^isPrimitiveType}}{{dataType}}.fromDynamic({{/isPrimitiveType}}data.{{name}}{{#isPrimitiveType}}, {{^isEnum}}{{dataType}}{{/isEnum}}{{#isEnum}}{{nameInCamelCase}}{{/isEnum}}{{/isPrimitiveType}}){{^required}} else null {{/required}};
    {{/isListContainer}}
    {{/allVars}}
    {{/model}}
    {{/models}}
    var obj: {{classname}} = new {{classname}}({{#models}}{{#model}}{{#requiredVars}}{{name}}{{#hasMore}}, {{/hasMore}}{{/requiredVars}}{{#hasRequired}}{{#hasOptional}}, {{/hasOptional}}{{/hasRequired}}{{#optionalVars}}{{name}}{{#hasMore}}, {{/hasMore}}{{/optionalVars}}{{/model}}{{/models}});
    obj.validate();
    return obj;
  }

  public function toDynamic(): Dynamic {
    return {
      {{#models}}
      {{#model}}
      {{#allVars}}
      {{name}}: {{^required}}if (Reflect.hasField(this, "{{name}}")) {{/required}}{{#isListContainer}}[for (item in this.{{name}}) {{#items}}item{{^isPrimitiveType}}.toDynamic(){{/isPrimitiveType}}{{/items}}]{{/isListContainer}}{{^isListContainer}}this.{{name}}{{^isPrimitiveType}}.toDynamic(){{/isPrimitiveType}}{{/isListContainer}}{{^required}} else null{{/required}}{{#hasMore}},{{/hasMore}}
      {{/allVars}}
      {{/model}}
      {{/models}}
    };
  }

  public function toString(): String {
    return haxe.Json.stringify(this.toDynamic());
  }
}


{{! Saving inline enums into the same file, because otherwise there might be a name collisions }}
{{#models}}
{{#model}}
{{#allVars}}
{{#isEnum}}
enum abstract {{nameInCamelCase}}({{dataType}}) to {{dataType}} from {{dataType}} {
  {{#allowableValues}}
  {{#enumVars}}
  var {{name}} = {{{value}}};
  {{/enumVars}}
  {{/allowableValues}}
}
{{/isEnum}}
{{/allVars}}
{{/model}}
{{/models}}
